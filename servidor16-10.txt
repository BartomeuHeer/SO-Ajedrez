#include <mysql.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>

MYSQL *conn;
MYSQL_RES *resultado;
MYSQL_ROW row;

typedef struct{
	
};

int conexion_db (){
	conn = mysql_init(NULL);
	if (conn==NULL) {
		printf ("Error al crear la conexion: %u %s\n", 
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	//inicializar la conexion
	conn = mysql_real_connect (conn, "localhost","root", "mysql", "ajedrez_db",0, NULL, 0);
	if (conn==NULL) {
		printf ("Error al inicializar la conexion: %u %s\n", 
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	return 0;
}

int iniciar_sesion(char peticion[]) 
{
	char username[35];
	char pass[35];
	char consulta[256];
	//char p = strtok(peticion, "/");
	strcpy(username,strtok(peticion, "/"));
	//p = strtok(NULL, "/");
	strcpy(pass,strtok(NULL, "/"));
	sprintf(consulta,"SELECT * FROM jugador WHERE user_name='%s' AND password='%s'",username,pass);
	int err=mysql_query (conn,consulta);
	if (err != 0) {
		printf ("Error al consultar datos de la base %u %s\n",mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	resultado = mysql_store_result (conn);  
	
	row = mysql_fetch_row (resultado); 
	
	if (row == NULL) {
		printf ("No se han obtenido datos en la consulta\n");
		return -1;
	}
	else {
		printf ("Consulta correcta\n");
		return 0;
	}
}

int registrarse(){

}

int primera_consulta(char respuesta[]){
	int err=mysql_query (conn,"select distinct jugador.nombre, jugador.apellido1, jugador.apellido2 from (jugador,partidas,resultado) where partidas.duracion < '01:00:00' AND partidas.ganador = jugador.id AND partidas.id = resultado.idP AND resultado.idJ = jugador.id");
	if (err!=0) { 
		printf ("Error al consultar datos de la base %u %s\n",mysql_errno(conn), mysql_error(conn)); 
		sprintf(respuesta, "%d",-1);
	} 
	resultado = mysql_store_result (conn);
	row = mysql_fetch_row (resultado);
	
	if (row == NULL){
		printf ("No se han obtenido datos en la consulta\n");
		sprintf(respuesta, "%d",-2);
	}
	else {
		int total = mysql_num_fields(resultado)-1;
		printf("%d\n",total);
		sprintf(respuesta,"%d/",total);
		while(row != NULL){
			sprintf(respuesta,"%s%s,%s,%s/",respuesta,row[0],row[1],row[2]);
			row = mysql_fetch_row (resultado);
		}
		respuesta[strlen(respuesta)-1] = NULL;
	}
	printf ("Respuesta: %s\n", respuesta);
	return 0;
}
int segunda_consulta(char respuesta[]){
	int err=mysql_query (conn, "select jugador.nombre from (jugador,partidas,resultado) where jugador.id = resultado.idJ and resultado.puntos = select MAX(resultado.puntos) from (resultado) and jugador.id = partida.id");
	if (err!=0) { 	
		printf ("Error al consultar datos de la base %u %s\n",mysql_errno(conn), mysql_error(conn)); 
		return -1; 
	} 
	resultado = mysql_store_result (conn);
	row = mysql_fetch_row (resultado);
	if (row == NULL){
		printf ("No se han obtenido datos en la consulta\n");
		sprintf(respuesta, "%d",-2);
	}
	else {
		int total = mysql_num_fields(resultado);
		sprintf(respuesta,"%d/",total);
		while(row != NULL){
			sprintf(respuesta,"%s,%s,%s,%s/",respuesta,row[0],row[1],row[2]);
			row = mysql_fetch_row (resultado);
		}
		respuesta[strlen(respuesta)-1] = "\0";
	}
	printf ("Respuesta: %s\n", respuesta);
	return 0;
}


int main(int argc, char **argv)
{
	int sock_conn, sock_listen, ret,err;
	struct sockaddr_in serv_adr;
	char peticion[512];
	char respuesta[512];
	char consulta[250];
	char peticion_num[512];
	// INICIALITZACIONS
	// Obrim el socket
	if ((sock_listen = socket(AF_INET, SOCK_STREAM, 0)) < 0)
		printf("Error creant socket");
	// Fem el bind al port
	memset(&serv_adr, 0, sizeof(serv_adr));// inicialitza a zero serv_addr
	serv_adr.sin_family = AF_INET;
	// asocia el socket a cualquiera de las IP de la m?quina. 
	//htonl formatea el numero que recibe al formato necesario
	serv_adr.sin_addr.s_addr = htonl(INADDR_ANY);
	// establecemos el puerto de escucha
	serv_adr.sin_port = htons(9040);
	if (bind(sock_listen, (struct sockaddr *) &serv_adr, sizeof(serv_adr)) < 0)
		printf ("Error al bind");
	
	if (listen(sock_listen, 3) < 0)
		printf("Error en el Listen");
	conexion_db();
	
	// Bucle infinito
	for (;;){  
		printf ("Escuchando\n");
		
		sock_conn = accept(sock_listen, NULL, NULL);
		printf ("He recibido conexion\n");
		//sock_conn es el socket que usaremos para este cliente
		// Ahora recibimos la petici?n

		int terminar =0;
		// Entramos en un bucle para atender todas las peticiones de este cliente
		//hasta que se desconecte
		while (terminar ==0)
		{
			// Ahora recibimos la petici?n
			ret=read(sock_conn,peticion_num, sizeof(peticion_num));
			printf ("Recibido\n");
			
			// Tenemos que a?adirle la marca de fin de string 
			// para que no escriba lo que hay despues en el buffer
			peticion_num[ret]='\0';
			
			
			printf ("Peticion: %s\n",peticion_num);
			// vamos a ver que quieren
			int codigo = atoi(strtok( peticion_num, "/"));
			//strcpy(peticion,strtok(NULL,"\0"));
			// Ya tenemos el c?digo de la petici?n
			switch (codigo)
			{
				case 1:	
					strcpy(peticion,strtok(NULL,"\0"));
					sprintf(respuesta,"%d", iniciar_sesion(peticion));
					// Enviamos respuesta
					write (sock_conn,respuesta, strlen(respuesta));
					break;
				case 2:
					
					break;
				case 3:
					
					if(primera_consulta(respuesta) == 0)
						// Enviamos respuesta
						write (sock_conn,respuesta, strlen(respuesta));
					break;
				case 4:
					if(segunda_consulta(respuesta) == 0)
						// Enviamos respuesta
						write (sock_conn,respuesta, strlen(respuesta));
					break;
				case 5:
					break;
				default:
					mysql_close (conn);
					terminar = 0;
					break;
			}
		}
		// Se acabo el servicio para este cliente
		close(sock_conn);
	}
}