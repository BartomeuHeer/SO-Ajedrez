#include <mysql.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>

/*int conexion_db (MYSQL *conn){
	conn = mysql_init(NULL);
	if (conn==NULL) {
		printf ("Error al crear la conexion: %u %s\n", 
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	//inicializar la conexion
	conn = mysql_real_connect (conn, "localhost","root", "mysql", "ajedrez_db",0, NULL, 0);
	if (conn==NULL) {
		printf ("Error al inicializar la conexion: %u %s\n", 
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	return 0;
}*/

int main(int argc, char **argv)
{
	int sock_conn, sock_listen, ret;
	struct sockaddr_in serv_adr;
	char peticion[512];
	char respuesta[512];
	char consulta[250];
	// INICIALITZACIONS
	// Obrim el socket
	if ((sock_listen = socket(AF_INET, SOCK_STREAM, 0)) < 0)
		printf("Error creant socket");
	// Fem el bind al port
	memset(&serv_adr, 0, sizeof(serv_adr));// inicialitza a zero serv_addr
	serv_adr.sin_family = AF_INET;
	// asocia el socket a cualquiera de las IP de la m?quina. 
	//htonl formatea el numero que recibe al formato necesario
	serv_adr.sin_addr.s_addr = htonl(INADDR_ANY);
	// establecemos el puerto de escucha
	serv_adr.sin_port = htons(9040);
	if (bind(sock_listen, (struct sockaddr *) &serv_adr, sizeof(serv_adr)) < 0)
		printf ("Error al bind");
	
	if (listen(sock_listen, 3) < 0)
		printf("Error en el Listen");
	
	int i;
	// Bucle infinito
	for (;;){  
		printf ("Escuchando\n");
		
		sock_conn = accept(sock_listen, NULL, NULL);
		printf ("He recibido conexion\n");
		//sock_conn es el socket que usaremos para este cliente
		// Ahora recibimos la petici?n
		
		ret=read(sock_conn,peticion, sizeof(peticion));
		printf ("Recibido\n");
		
		//conexio bd
		MYSQL *conn;
		int err;
		// Estructura especial para almacenar resultados de consultas 
		MYSQL_RES *resultado;
		MYSQL_ROW row;
		//Creamos una conexion al servidor MYSQL 
		conn = mysql_init(NULL);
		if (conn==NULL) {
			printf ("Error al crear la conexion: %u %s\n", 
					mysql_errno(conn), mysql_error(conn));
			exit (1);
		}
		//inicializar la conexion
		conn = mysql_real_connect (conn, "localhost","root", "mysql", "ajedrez_db",0, NULL, 0);
		if (conn==NULL) {
			printf ("Error al inicializar la conexion: %u %s\n", 
					mysql_errno(conn), mysql_error(conn));
			exit (1);
		}
		int terminar =0;
		// Entramos en un bucle para atender todas las peticiones de este cliente
		//hasta que se desconecte
		while (terminar ==0)
		{
			// Ahora recibimos la petici?n
			ret=read(sock_conn,peticion, sizeof(peticion));
			printf ("Recibido\n");
			
			// Tenemos que a?adirle la marca de fin de string 
			// para que no escriba lo que hay despues en el buffer
			peticion[ret]='\0';
			
			
			printf ("Peticion: %s\n",peticion);
			// vamos a ver que quieren
			char *p = strtok( peticion, "/");
			int codigo =  atoi (p);
			// Ya tenemos el c?digo de la petici?n
			switch (codigo)
			{
				case 1:	
					printf("hola\n");
					char username[30];
					p = strtok(NULL, "/");
					strcpy(username,p);
					p = strtok(NULL, "/");
					char pass[30];
					strcpy(pass,p);
					
					strcpy (consulta,"SELECT user_name FROM jugador WHERE user_name='");  
					
					strcat (consulta, username); 
					
					strcat (consulta,"' AND password = '");
					strcat (consulta, pass);
					strcat (consulta, "'");
					err=mysql_query (conn,consulta);
					if (err != 0) {
						printf ("Error al consultar datos de la base %u %s\n",mysql_errno(conn), mysql_error(conn));
						exit (1);
					}
					resultado = mysql_store_result (conn);  
					
					row = mysql_fetch_row (resultado); 
					
					if (row == NULL) 
						printf ("No se han obtenido datos en la consulta\n"); 
					else {
						strcpy(respuesta,"0");
						printf ("Consulta correcta\n");
					}
					printf ("Respuesta: %s\n", respuesta);
					// Enviamos respuesta
					write (sock_conn,respuesta, strlen(respuesta));
					break;
				case 2:
					break;
				case 3:
					err=mysql_query (conn,"select jugador.nombre from (jugador,partidas,resultado) where partidas.duracion < '01:00:00' AND partidas.ganador = jugador.id AND partidas.id = resultado.idP AND resultado.idJ = jugador.id");
					if (err!=0) { 
						
						printf ("Error al consultar datos de la base %u %s\n",mysql_errno(conn), mysql_error(conn)); 
						exit (1); 
					} 
					resultado = mysql_store_result (conn);
					row = mysql_fetch_row (resultado);
					
					if (row == NULL)
						printf ("No se han obtenido datos en la consulta\n");
					else {
						int total = mysql_num_fields(resultado);
						sprintf(respuesta,"%d/",total);
						while(row != NULL){
							sprintf(respuesta,"%s,%s,%s/",row[0],row[1],row[2]);
							row = mysql_fetch_row (resultado);
						}
					}
					printf ("Respuesta: %s\n", respuesta);
					// Enviamos respuesta
					write (sock_conn,respuesta, strlen(respuesta));			
					break;
				case 4:
					break;
				case 5:
					break;
				default:
					mysql_close (conn);
					terminar = 0;
					break;
			}
		}
		// Se acabo el servicio para este cliente
		close(sock_conn);
	}
}
